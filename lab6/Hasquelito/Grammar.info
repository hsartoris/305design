-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from Grammar.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseHasquelito -> AST                      (0)
	AST -> boolval                                     (1)
	AST -> intval                                      (2)
	AST -> let var '=' AST in AST                      (3)
	AST -> if AST then AST else AST                    (4)
	AST -> '(' lambda var '->' AST ')' '::' TypeExp '->' TypeExp   (5)
	AST -> AST '&&' AST                                (6)
	AST -> AST '||' AST                                (7)
	AST -> AST '+' AST                                 (8)
	AST -> '-' AST                                     (9)
	AST -> AST '-' AST                                 (10)
	AST -> '-' AST '-' AST                             (11)
	AST -> '-' AST '+' AST                             (12)
	AST -> AST '*' AST                                 (13)
	AST -> AST AST                                     (14)
	AST -> quot AST AST                                (15)
	AST -> rem AST AST                                 (16)
	AST -> AST '==' AST                                (17)
	AST -> AST '>=' AST                                (18)
	AST -> AST '<=' AST                                (19)
	AST -> AST '/=' AST                                (20)
	AST -> AST '>' AST                                 (21)
	AST -> AST '<' AST                                 (22)
	AST -> '(' AST ')'                                 (23)
	AST -> var                                         (24)
	TypeExp -> bool                                    (25)
	TypeExp -> int                                     (26)
	TypeExp -> TypeExp '->' TypeExp                    (27)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	boolval        { BOOLVAL $$ }
	intval         { INTVAL $$ }
	if             { IF }
	then           { THEN }
	else           { ELSE }
	let            { LET }
	'='            { BIND }
	in             { IN }
	lambda         { LAMBDA }
	'->'           { ARROW }
	'::'           { COLONS }
	'=='           { EQUALS }
	'&&'           { AND }
	'||'           { OR }
	'+'            { PLUS }
	'-'            { MINUS }
	'*'            { TIMES }
	quot           { QUOT }
	rem            { REM }
	'<='           { LTEQ }
	'>='           { GTEQ }
	'/='           { NOTEQ }
	'<'            { Lexer.LT }
	'>'            { Lexer.GT }
	bool           { BOOL }
	int            { INT }
	'('            { LPAREN }
	')'            { RPAREN }
	var            { VAR $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseHasquelito rule  0
	AST             rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24
	TypeExp         rules 25, 26, 27

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 3

State 1


	boolval        shift, and enter state 2


State 2

	AST -> boolval .                                    (rule 1)

	boolval        reduce using rule 1
	intval         reduce using rule 1
	if             reduce using rule 1
	then           reduce using rule 1
	else           reduce using rule 1
	let            reduce using rule 1
	in             reduce using rule 1
	'=='           reduce using rule 1
	'&&'           reduce using rule 1
	'||'           reduce using rule 1
	'+'            reduce using rule 1
	'-'            reduce using rule 1
	'*'            reduce using rule 1
	quot           reduce using rule 1
	rem            reduce using rule 1
	'<='           reduce using rule 1
	'>='           reduce using rule 1
	'/='           reduce using rule 1
	'<'            reduce using rule 1
	'>'            reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	var            reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_parseHasquelito -> AST .                     (rule 0)
	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'=='           shift, and enter state 20
	'&&'           shift, and enter state 21
	'||'           shift, and enter state 22
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           shift, and enter state 26
	'>='           shift, and enter state 27
	'/='           shift, and enter state 28
	'<'            shift, and enter state 29
	'>'            shift, and enter state 30
	'('            shift, and enter state 10
	var            shift, and enter state 11
	%eof           accept

	AST            goto state 19

State 4

	AST -> intval .                                     (rule 2)

	boolval        reduce using rule 2
	intval         reduce using rule 2
	if             reduce using rule 2
	then           reduce using rule 2
	else           reduce using rule 2
	let            reduce using rule 2
	in             reduce using rule 2
	'=='           reduce using rule 2
	'&&'           reduce using rule 2
	'||'           reduce using rule 2
	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'*'            reduce using rule 2
	quot           reduce using rule 2
	rem            reduce using rule 2
	'<='           reduce using rule 2
	'>='           reduce using rule 2
	'/='           reduce using rule 2
	'<'            reduce using rule 2
	'>'            reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	var            reduce using rule 2
	%eof           reduce using rule 2


State 5

	AST -> if . AST then AST else AST                   (rule 4)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 18

State 6

	AST -> let . var '=' AST in AST                     (rule 3)

	var            shift, and enter state 17


State 7

	AST -> '-' . AST                                    (rule 9)
	AST -> '-' . AST '-' AST                            (rule 11)
	AST -> '-' . AST '+' AST                            (rule 12)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 16

State 8

	AST -> quot . AST AST                               (rule 15)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 15

State 9

	AST -> rem . AST AST                                (rule 16)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 14

State 10

	AST -> '(' . lambda var '->' AST ')' '::' TypeExp '->' TypeExp    (rule 5)
	AST -> '(' . AST ')'                                (rule 23)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	lambda         shift, and enter state 13
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 12

State 11

	AST -> var .                                        (rule 24)

	boolval        reduce using rule 24
	intval         reduce using rule 24
	if             reduce using rule 24
	then           reduce using rule 24
	else           reduce using rule 24
	let            reduce using rule 24
	in             reduce using rule 24
	'=='           reduce using rule 24
	'&&'           reduce using rule 24
	'||'           reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	quot           reduce using rule 24
	rem            reduce using rule 24
	'<='           reduce using rule 24
	'>='           reduce using rule 24
	'/='           reduce using rule 24
	'<'            reduce using rule 24
	'>'            reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	var            reduce using rule 24
	%eof           reduce using rule 24


State 12

	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)
	AST -> '(' AST . ')'                                (rule 23)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'=='           shift, and enter state 20
	'&&'           shift, and enter state 21
	'||'           shift, and enter state 22
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           shift, and enter state 26
	'>='           shift, and enter state 27
	'/='           shift, and enter state 28
	'<'            shift, and enter state 29
	'>'            shift, and enter state 30
	'('            shift, and enter state 10
	')'            shift, and enter state 49
	var            shift, and enter state 11

	AST            goto state 19

State 13

	AST -> '(' lambda . var '->' AST ')' '::' TypeExp '->' TypeExp    (rule 5)

	var            shift, and enter state 48


State 14

	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> rem AST . AST                                (rule 16)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'=='           shift, and enter state 20
	'&&'           shift, and enter state 21
	'||'           shift, and enter state 22
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           shift, and enter state 26
	'>='           shift, and enter state 27
	'/='           shift, and enter state 28
	'<'            shift, and enter state 29
	'>'            shift, and enter state 30
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 47

State 15

	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> quot AST . AST                               (rule 15)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'=='           shift, and enter state 20
	'&&'           shift, and enter state 21
	'||'           shift, and enter state 22
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           shift, and enter state 26
	'>='           shift, and enter state 27
	'/='           shift, and enter state 28
	'<'            shift, and enter state 29
	'>'            shift, and enter state 30
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 46

State 16

	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> '-' AST .                                    (rule 9)
	AST -> AST . '-' AST                                (rule 10)
	AST -> '-' AST . '-' AST                            (rule 11)
	AST -> '-' AST . '+' AST                            (rule 12)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        reduce using rule 9
	intval         reduce using rule 9
	if             reduce using rule 9
	then           reduce using rule 9
	else           reduce using rule 9
	let            reduce using rule 9
	in             reduce using rule 9
	'=='           reduce using rule 9
	'&&'           reduce using rule 9
	'||'           reduce using rule 9
	'+'            shift, and enter state 44
	'-'            shift, and enter state 45
	'*'            shift, and enter state 25
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           reduce using rule 9
	'>='           reduce using rule 9
	'/='           reduce using rule 9
	'<'            reduce using rule 9
	'>'            reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	var            reduce using rule 9
	%eof           reduce using rule 9

	AST            goto state 19

State 17

	AST -> let var . '=' AST in AST                     (rule 3)

	'='            shift, and enter state 43


State 18

	AST -> if AST . then AST else AST                   (rule 4)
	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	then           shift, and enter state 42
	let            shift, and enter state 6
	'=='           shift, and enter state 20
	'&&'           shift, and enter state 21
	'||'           shift, and enter state 22
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           shift, and enter state 26
	'>='           shift, and enter state 27
	'/='           shift, and enter state 28
	'<'            shift, and enter state 29
	'>'            shift, and enter state 30
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 19

State 19

	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST AST .                                    (rule 14)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        reduce using rule 14
	intval         reduce using rule 14
	if             reduce using rule 14
	then           reduce using rule 14
	else           reduce using rule 14
	let            reduce using rule 14
	in             reduce using rule 14
	'=='           reduce using rule 14
	'&&'           reduce using rule 14
	'||'           reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           reduce using rule 14
	'>='           reduce using rule 14
	'/='           reduce using rule 14
	'<'            reduce using rule 14
	'>'            reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	var            reduce using rule 14
	%eof           reduce using rule 14

	AST            goto state 19

State 20

	AST -> AST '==' . AST                               (rule 17)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 41

State 21

	AST -> AST '&&' . AST                               (rule 6)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 40

State 22

	AST -> AST '||' . AST                               (rule 7)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 39

State 23

	AST -> AST '+' . AST                                (rule 8)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 38

State 24

	AST -> '-' . AST                                    (rule 9)
	AST -> AST '-' . AST                                (rule 10)
	AST -> '-' . AST '-' AST                            (rule 11)
	AST -> '-' . AST '+' AST                            (rule 12)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 37

State 25

	AST -> AST '*' . AST                                (rule 13)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 36

State 26

	AST -> AST '<=' . AST                               (rule 19)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 35

State 27

	AST -> AST '>=' . AST                               (rule 18)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 34

State 28

	AST -> AST '/=' . AST                               (rule 20)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 33

State 29

	AST -> AST '<' . AST                                (rule 22)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 32

State 30

	AST -> AST '>' . AST                                (rule 21)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 31

State 31

	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST '>' AST .                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        reduce using rule 21
	intval         reduce using rule 21
	if             reduce using rule 21
	then           reduce using rule 21
	else           reduce using rule 21
	let            reduce using rule 21
	in             reduce using rule 21
	'=='           fail
	'&&'           reduce using rule 21
	'||'           reduce using rule 21
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           fail
	'>='           fail
	'/='           fail
	'<'            fail
	'>'            fail
	'('            reduce using rule 21
	')'            reduce using rule 21
	var            reduce using rule 21
	%eof           reduce using rule 21

	AST            goto state 19

State 32

	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)
	AST -> AST '<' AST .                                (rule 22)

	boolval        reduce using rule 22
	intval         reduce using rule 22
	if             reduce using rule 22
	then           reduce using rule 22
	else           reduce using rule 22
	let            reduce using rule 22
	in             reduce using rule 22
	'=='           fail
	'&&'           reduce using rule 22
	'||'           reduce using rule 22
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           fail
	'>='           fail
	'/='           fail
	'<'            fail
	'>'            fail
	'('            reduce using rule 22
	')'            reduce using rule 22
	var            reduce using rule 22
	%eof           reduce using rule 22

	AST            goto state 19

State 33

	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST '/=' AST .                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        reduce using rule 20
	intval         reduce using rule 20
	if             reduce using rule 20
	then           reduce using rule 20
	else           reduce using rule 20
	let            reduce using rule 20
	in             reduce using rule 20
	'=='           fail
	'&&'           reduce using rule 20
	'||'           reduce using rule 20
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           fail
	'>='           fail
	'/='           fail
	'<'            fail
	'>'            fail
	'('            reduce using rule 20
	')'            reduce using rule 20
	var            reduce using rule 20
	%eof           reduce using rule 20

	AST            goto state 19

State 34

	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST '>=' AST .                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        reduce using rule 18
	intval         reduce using rule 18
	if             reduce using rule 18
	then           reduce using rule 18
	else           reduce using rule 18
	let            reduce using rule 18
	in             reduce using rule 18
	'=='           fail
	'&&'           reduce using rule 18
	'||'           reduce using rule 18
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           fail
	'>='           fail
	'/='           fail
	'<'            fail
	'>'            fail
	'('            reduce using rule 18
	')'            reduce using rule 18
	var            reduce using rule 18
	%eof           reduce using rule 18

	AST            goto state 19

State 35

	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST '<=' AST .                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        reduce using rule 19
	intval         reduce using rule 19
	if             reduce using rule 19
	then           reduce using rule 19
	else           reduce using rule 19
	let            reduce using rule 19
	in             reduce using rule 19
	'=='           fail
	'&&'           reduce using rule 19
	'||'           reduce using rule 19
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           fail
	'>='           fail
	'/='           fail
	'<'            fail
	'>'            fail
	'('            reduce using rule 19
	')'            reduce using rule 19
	var            reduce using rule 19
	%eof           reduce using rule 19

	AST            goto state 19

State 36

	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST '*' AST .                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        reduce using rule 13
	intval         reduce using rule 13
	if             reduce using rule 13
	then           reduce using rule 13
	else           reduce using rule 13
	let            reduce using rule 13
	in             reduce using rule 13
	'=='           reduce using rule 13
	'&&'           reduce using rule 13
	'||'           reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           reduce using rule 13
	'>='           reduce using rule 13
	'/='           reduce using rule 13
	'<'            reduce using rule 13
	'>'            reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	var            reduce using rule 13
	%eof           reduce using rule 13

	AST            goto state 19

State 37

	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> '-' AST .                                    (rule 9)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST '-' AST .                                (rule 10)
	AST -> '-' AST . '-' AST                            (rule 11)
	AST -> '-' AST . '+' AST                            (rule 12)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        reduce using rule 10
	intval         reduce using rule 10
	if             reduce using rule 10
	then           reduce using rule 10
	else           reduce using rule 10
	let            reduce using rule 10
	in             reduce using rule 10
	'=='           reduce using rule 10
	'&&'           reduce using rule 10
	'||'           reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            shift, and enter state 25
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           reduce using rule 10
	'>='           reduce using rule 10
	'/='           reduce using rule 10
	'<'            reduce using rule 10
	'>'            reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	var            reduce using rule 10
	%eof           reduce using rule 10

	AST            goto state 19

State 38

	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST '+' AST .                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        reduce using rule 8
	intval         reduce using rule 8
	if             reduce using rule 8
	then           reduce using rule 8
	else           reduce using rule 8
	let            reduce using rule 8
	in             reduce using rule 8
	'=='           reduce using rule 8
	'&&'           reduce using rule 8
	'||'           reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            shift, and enter state 25
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           reduce using rule 8
	'>='           reduce using rule 8
	'/='           reduce using rule 8
	'<'            reduce using rule 8
	'>'            reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	var            reduce using rule 8
	%eof           reduce using rule 8

	AST            goto state 19

State 39

	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST '||' AST .                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        reduce using rule 7
	intval         reduce using rule 7
	if             reduce using rule 7
	then           reduce using rule 7
	else           reduce using rule 7
	let            reduce using rule 7
	in             reduce using rule 7
	'=='           shift, and enter state 20
	'&&'           shift, and enter state 21
	'||'           shift, and enter state 22
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           shift, and enter state 26
	'>='           shift, and enter state 27
	'/='           shift, and enter state 28
	'<'            shift, and enter state 29
	'>'            shift, and enter state 30
	'('            reduce using rule 7
	')'            reduce using rule 7
	var            reduce using rule 7
	%eof           reduce using rule 7

	AST            goto state 19

State 40

	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST '&&' AST .                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        reduce using rule 6
	intval         reduce using rule 6
	if             reduce using rule 6
	then           reduce using rule 6
	else           reduce using rule 6
	let            reduce using rule 6
	in             reduce using rule 6
	'=='           shift, and enter state 20
	'&&'           shift, and enter state 21
	'||'           reduce using rule 6
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           shift, and enter state 26
	'>='           shift, and enter state 27
	'/='           shift, and enter state 28
	'<'            shift, and enter state 29
	'>'            shift, and enter state 30
	'('            reduce using rule 6
	')'            reduce using rule 6
	var            reduce using rule 6
	%eof           reduce using rule 6

	AST            goto state 19

State 41

	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST '==' AST .                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        reduce using rule 17
	intval         reduce using rule 17
	if             reduce using rule 17
	then           reduce using rule 17
	else           reduce using rule 17
	let            reduce using rule 17
	in             reduce using rule 17
	'=='           fail
	'&&'           reduce using rule 17
	'||'           reduce using rule 17
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           fail
	'>='           fail
	'/='           fail
	'<'            fail
	'>'            fail
	'('            reduce using rule 17
	')'            reduce using rule 17
	var            reduce using rule 17
	%eof           reduce using rule 17

	AST            goto state 19

State 42

	AST -> if AST then . AST else AST                   (rule 4)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 54

State 43

	AST -> let var '=' . AST in AST                     (rule 3)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 53

State 44

	AST -> AST '+' . AST                                (rule 8)
	AST -> '-' AST '+' . AST                            (rule 12)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 52

State 45

	AST -> '-' . AST                                    (rule 9)
	AST -> AST '-' . AST                                (rule 10)
	AST -> '-' . AST '-' AST                            (rule 11)
	AST -> '-' AST '-' . AST                            (rule 11)
	AST -> '-' . AST '+' AST                            (rule 12)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 51

State 46

	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST AST .                                    (rule 14)
	AST -> quot AST AST .                               (rule 15)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        reduce using rule 15
	intval         reduce using rule 15
	if             reduce using rule 15
	then           reduce using rule 15
	else           reduce using rule 15
	let            reduce using rule 15
	in             reduce using rule 15
	'=='           reduce using rule 15
	'&&'           reduce using rule 15
	'||'           reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	quot           reduce using rule 15
	rem            reduce using rule 15
	'<='           reduce using rule 15
	'>='           reduce using rule 15
	'/='           reduce using rule 15
	'<'            reduce using rule 15
	'>'            reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	var            reduce using rule 15
	%eof           reduce using rule 15

	AST            goto state 19

State 47

	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST AST .                                    (rule 14)
	AST -> rem AST AST .                                (rule 16)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        reduce using rule 16
	intval         reduce using rule 16
	if             reduce using rule 16
	then           reduce using rule 16
	else           reduce using rule 16
	let            reduce using rule 16
	in             reduce using rule 16
	'=='           reduce using rule 16
	'&&'           reduce using rule 16
	'||'           reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	quot           reduce using rule 16
	rem            reduce using rule 16
	'<='           reduce using rule 16
	'>='           reduce using rule 16
	'/='           reduce using rule 16
	'<'            reduce using rule 16
	'>'            reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	var            reduce using rule 16
	%eof           reduce using rule 16

	AST            goto state 19

State 48

	AST -> '(' lambda var . '->' AST ')' '::' TypeExp '->' TypeExp    (rule 5)

	'->'           shift, and enter state 50


State 49

	AST -> '(' AST ')' .                                (rule 23)

	boolval        reduce using rule 23
	intval         reduce using rule 23
	if             reduce using rule 23
	then           reduce using rule 23
	else           reduce using rule 23
	let            reduce using rule 23
	in             reduce using rule 23
	'=='           reduce using rule 23
	'&&'           reduce using rule 23
	'||'           reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	quot           reduce using rule 23
	rem            reduce using rule 23
	'<='           reduce using rule 23
	'>='           reduce using rule 23
	'/='           reduce using rule 23
	'<'            reduce using rule 23
	'>'            reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	var            reduce using rule 23
	%eof           reduce using rule 23


State 50

	AST -> '(' lambda var '->' . AST ')' '::' TypeExp '->' TypeExp    (rule 5)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 57

State 51

	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> '-' AST .                                    (rule 9)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST '-' AST .                                (rule 10)
	AST -> '-' AST . '-' AST                            (rule 11)
	AST -> '-' AST '-' AST .                            (rule 11)
	AST -> '-' AST . '+' AST                            (rule 12)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        reduce using rule 11
	intval         reduce using rule 11
	if             reduce using rule 11
	then           reduce using rule 11
	else           reduce using rule 11
	let            reduce using rule 11
	in             reduce using rule 11
	'=='           reduce using rule 11
	'&&'           reduce using rule 11
	'||'           reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            shift, and enter state 25
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           reduce using rule 11
	'>='           reduce using rule 11
	'/='           reduce using rule 11
	'<'            reduce using rule 11
	'>'            reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	var            reduce using rule 11
	%eof           reduce using rule 11

	AST            goto state 19

State 52

	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST '+' AST .                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> '-' AST '+' AST .                            (rule 12)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        reduce using rule 12
	intval         reduce using rule 12
	if             reduce using rule 12
	then           reduce using rule 12
	else           reduce using rule 12
	let            reduce using rule 12
	in             reduce using rule 12
	'=='           reduce using rule 12
	'&&'           reduce using rule 12
	'||'           reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            shift, and enter state 25
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           reduce using rule 12
	'>='           reduce using rule 12
	'/='           reduce using rule 12
	'<'            reduce using rule 12
	'>'            reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	var            reduce using rule 12
	%eof           reduce using rule 12

	AST            goto state 19

State 53

	AST -> let var '=' AST . in AST                     (rule 3)
	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	in             shift, and enter state 56
	'=='           shift, and enter state 20
	'&&'           shift, and enter state 21
	'||'           shift, and enter state 22
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           shift, and enter state 26
	'>='           shift, and enter state 27
	'/='           shift, and enter state 28
	'<'            shift, and enter state 29
	'>'            shift, and enter state 30
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 19

State 54

	AST -> if AST then AST . else AST                   (rule 4)
	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	else           shift, and enter state 55
	let            shift, and enter state 6
	'=='           shift, and enter state 20
	'&&'           shift, and enter state 21
	'||'           shift, and enter state 22
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           shift, and enter state 26
	'>='           shift, and enter state 27
	'/='           shift, and enter state 28
	'<'            shift, and enter state 29
	'>'            shift, and enter state 30
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 19

State 55

	AST -> if AST then AST else . AST                   (rule 4)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 60

State 56

	AST -> let var '=' AST in . AST                     (rule 3)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'-'            shift, and enter state 7
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 59

State 57

	AST -> '(' lambda var '->' AST . ')' '::' TypeExp '->' TypeExp    (rule 5)
	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        shift, and enter state 2
	intval         shift, and enter state 4
	if             shift, and enter state 5
	let            shift, and enter state 6
	'=='           shift, and enter state 20
	'&&'           shift, and enter state 21
	'||'           shift, and enter state 22
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           shift, and enter state 26
	'>='           shift, and enter state 27
	'/='           shift, and enter state 28
	'<'            shift, and enter state 29
	'>'            shift, and enter state 30
	'('            shift, and enter state 10
	')'            shift, and enter state 58
	var            shift, and enter state 11

	AST            goto state 19

State 58

	AST -> '(' lambda var '->' AST ')' . '::' TypeExp '->' TypeExp    (rule 5)

	'::'           shift, and enter state 61


State 59

	AST -> let var '=' AST in AST .                     (rule 3)
	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        reduce using rule 3
	intval         reduce using rule 3
	if             shift, and enter state 5
	then           reduce using rule 3
	else           reduce using rule 3
	let            shift, and enter state 6
	in             reduce using rule 3
	'=='           shift, and enter state 20
	'&&'           shift, and enter state 21
	'||'           shift, and enter state 22
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           shift, and enter state 26
	'>='           shift, and enter state 27
	'/='           shift, and enter state 28
	'<'            shift, and enter state 29
	'>'            shift, and enter state 30
	'('            reduce using rule 3
	')'            reduce using rule 3
	var            reduce using rule 3
	%eof           reduce using rule 3

	AST            goto state 19

State 60

	AST -> if AST then AST else AST .                   (rule 4)
	AST -> AST . '&&' AST                               (rule 6)
	AST -> AST . '||' AST                               (rule 7)
	AST -> AST . '+' AST                                (rule 8)
	AST -> AST . '-' AST                                (rule 10)
	AST -> AST . '*' AST                                (rule 13)
	AST -> AST . AST                                    (rule 14)
	AST -> AST . '==' AST                               (rule 17)
	AST -> AST . '>=' AST                               (rule 18)
	AST -> AST . '<=' AST                               (rule 19)
	AST -> AST . '/=' AST                               (rule 20)
	AST -> AST . '>' AST                                (rule 21)
	AST -> AST . '<' AST                                (rule 22)

	boolval        reduce using rule 4
	intval         reduce using rule 4
	if             shift, and enter state 5
	then           reduce using rule 4
	else           reduce using rule 4
	let            shift, and enter state 6
	in             reduce using rule 4
	'=='           shift, and enter state 20
	'&&'           shift, and enter state 21
	'||'           shift, and enter state 22
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	quot           shift, and enter state 8
	rem            shift, and enter state 9
	'<='           shift, and enter state 26
	'>='           shift, and enter state 27
	'/='           shift, and enter state 28
	'<'            shift, and enter state 29
	'>'            shift, and enter state 30
	'('            reduce using rule 4
	')'            reduce using rule 4
	var            reduce using rule 4
	%eof           reduce using rule 4

	AST            goto state 19

State 61

	AST -> '(' lambda var '->' AST ')' '::' . TypeExp '->' TypeExp    (rule 5)

	bool           shift, and enter state 63
	int            shift, and enter state 64

	TypeExp        goto state 62

State 62

	AST -> '(' lambda var '->' AST ')' '::' TypeExp . '->' TypeExp    (rule 5)
	TypeExp -> TypeExp . '->' TypeExp                   (rule 27)

	'->'           shift, and enter state 65


State 63

	TypeExp -> bool .                                   (rule 25)

	boolval        reduce using rule 25
	intval         reduce using rule 25
	if             reduce using rule 25
	then           reduce using rule 25
	else           reduce using rule 25
	let            reduce using rule 25
	in             reduce using rule 25
	'->'           reduce using rule 25
	'=='           reduce using rule 25
	'&&'           reduce using rule 25
	'||'           reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	quot           reduce using rule 25
	rem            reduce using rule 25
	'<='           reduce using rule 25
	'>='           reduce using rule 25
	'/='           reduce using rule 25
	'<'            reduce using rule 25
	'>'            reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	var            reduce using rule 25
	%eof           reduce using rule 25


State 64

	TypeExp -> int .                                    (rule 26)

	boolval        reduce using rule 26
	intval         reduce using rule 26
	if             reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	let            reduce using rule 26
	in             reduce using rule 26
	'->'           reduce using rule 26
	'=='           reduce using rule 26
	'&&'           reduce using rule 26
	'||'           reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	quot           reduce using rule 26
	rem            reduce using rule 26
	'<='           reduce using rule 26
	'>='           reduce using rule 26
	'/='           reduce using rule 26
	'<'            reduce using rule 26
	'>'            reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	var            reduce using rule 26
	%eof           reduce using rule 26


State 65

	AST -> '(' lambda var '->' AST ')' '::' TypeExp '->' . TypeExp    (rule 5)
	TypeExp -> TypeExp '->' . TypeExp                   (rule 27)

	bool           shift, and enter state 63
	int            shift, and enter state 64

	TypeExp        goto state 66

State 66

	AST -> '(' lambda var '->' AST ')' '::' TypeExp '->' TypeExp .    (rule 5)
	TypeExp -> TypeExp . '->' TypeExp                   (rule 27)
	TypeExp -> TypeExp '->' TypeExp .                   (rule 27)

	boolval        reduce using rule 5
	intval         reduce using rule 5
	if             reduce using rule 5
	then           reduce using rule 5
	else           reduce using rule 5
	let            reduce using rule 5
	in             reduce using rule 5
	'->'           shift, and enter state 67
	'=='           reduce using rule 5
	'&&'           reduce using rule 5
	'||'           reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            reduce using rule 5
	quot           reduce using rule 5
	rem            reduce using rule 5
	'<='           reduce using rule 5
	'>='           reduce using rule 5
	'/='           reduce using rule 5
	'<'            reduce using rule 5
	'>'            reduce using rule 5
	'('            reduce using rule 5
	')'            reduce using rule 5
	var            reduce using rule 5
	%eof           reduce using rule 5


State 67

	TypeExp -> TypeExp '->' . TypeExp                   (rule 27)

	bool           shift, and enter state 63
	int            shift, and enter state 64

	TypeExp        goto state 68

State 68

	TypeExp -> TypeExp . '->' TypeExp                   (rule 27)
	TypeExp -> TypeExp '->' TypeExp .                   (rule 27)

	boolval        reduce using rule 27
	intval         reduce using rule 27
	if             reduce using rule 27
	then           reduce using rule 27
	else           reduce using rule 27
	let            reduce using rule 27
	in             reduce using rule 27
	'->'           shift, and enter state 67
	'=='           reduce using rule 27
	'&&'           reduce using rule 27
	'||'           reduce using rule 27
	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            reduce using rule 27
	quot           reduce using rule 27
	rem            reduce using rule 27
	'<='           reduce using rule 27
	'>='           reduce using rule 27
	'/='           reduce using rule 27
	'<'            reduce using rule 27
	'>'            reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	var            reduce using rule 27
	%eof           reduce using rule 27


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 28
Number of terminals: 29
Number of non-terminals: 3
Number of states: 69
